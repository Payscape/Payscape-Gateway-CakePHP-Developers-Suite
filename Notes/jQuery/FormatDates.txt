
Stack Exchange sign up  log in  careers 2.0 


Stack Overflow
Questions
Tags
Tour
Users
Ask Question
Tell me more × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
How to format a JSON date?

up vote
736
down vote
favorite
219
I'm taking my first crack at Ajax with jQuery. I'm getting my data onto my page, but I'm having some trouble with the JSON data that is returned for Date data types. Basically, I'm getting a string back that looks like this:

/Date(1224043200000)/
From someone totally new to JSON - How do I format this to a short date format? Should this be handled somewhere in the jQuery code? I've tried the jQuery.UI.datepicker plugin using $.datepicker.formatDate() without any success.

FYI: Here's the solution I came up with using a combination of the answers here:

function getMismatch(id) {
  $.getJSON("Main.aspx?Callback=GetMismatch", 
    { MismatchId: id },

    function (result) {
      $("#AuthMerchId").text(result.AuthorizationMerchantId);
      $("#SttlMerchId").text(result.SettlementMerchantId);
      $("#CreateDate").text(formatJSONDate(Date(result.AppendDts)));
      $("#ExpireDate").text(formatJSONDate(Date(result.ExpiresDts)));
      $("#LastUpdate").text(formatJSONDate(Date(result.LastUpdateDts)));
      $("#LastUpdatedBy").text(result.LastUpdateNt);
      $("#ProcessIn").text(result.ProcessIn);
    }
  );

  return false;
}

function formatJSONDate(jsonDate) {
  var newDate = dateFormat(jsonDate, "mm/dd/yyyy");
  return newDate;
}
This solution got my object from the callback method and displayed the dates on the page properly using the date format library.

jquery asp.net asp.net-mvc ajax json
share|improve this question
edited Sep 1 '12 at 7:49

community wiki
8 revs, 5 users 34%
Mark Struzinski
7	  
This might be interesting: hanselman.com/blog/… – citronas Mar 16 '12 at 10:32
30 Answers activeoldestvotes
up vote
760
down vote
accepted
Eval is not necessary. This will work fine:

var date = new Date(parseInt(jsonDate.substr(6)));
The substr function takes out the "/Date(" part, and the parseInt function gets the integer and ignores the ")/" at the end. The resulting number is passed into the Date constructor.

share|improve this answer
edited May 22 at 18:54

community wiki
2 revs, 2 users 89%
Roy Tinker
3	  
This worked for me, thanks ! – Jhonny D. Cano -Leftware- Mar 16 '10 at 21:20
37	  
+1 for not using eval, and for also working if a timezone offset is included in the string (which was the case for me). – Remi Despres-Smyth Apr 13 '10 at 17:34
13	  
+1 This answer should be marked the answer. It is the most universal. – Evildonald Aug 23 '10 at 19:20
3	  
@Broam: Both methods (the replace function and this answer) would have to change if MS changes the format. – Roy Tinker Aug 25 '10 at 16:11
5	  
Could you please update it with the radix var date = new Date(parseInt(jsonDate.substr(6), 10)); – James Kyburz Apr 25 '12 at 5:25
show 19 more comments

up vote
63
down vote
You can use this to get a date from json:

var date = eval(jsonDate.replace(/\/Date\((\d+)\)\//gi, "new Date($1)"));
and then you can use JavaScript Date Format script (1.2 KB when minified and gzipped) to display it as you want.

share|improve this answer
answered Oct 15 '08 at 21:14

community wiki
Panos
5	  
There's nothing wrong with the line, the sequence is \// . First slash is escaped so it does not count like a comment. It's your editor tricking you, the line will work fine. – legenden Aug 27 '09 at 15:19
95	  
-1 for the use of eval. – user166390 Oct 30 '09 at 4:37
15	  
@pst eval is needed. You don't know what you're talking about. – rball Dec 3 '09 at 3:40
110	  
@rball, nonsense: jsonDate = new Date(+jsonDate.replace(/\/Date\((\d+)\)\//, '$1')); – eyelidlessness Jan 19 '10 at 5:02
28	  
pst was correct, it is possible to do this in a variety of ways without 'eval'. Crockford says that 'eval Is Evil' because it is less readable and is less secure, furthermore he may further imply that it is less efficient and more dangerous because it hits the javascript compiler. – Mark Rogers Feb 25 '10 at 15:43
show 11 more comments
up vote
25
down vote
The original example:

/Date(1224043200000)/  
does not reflect the formatting used by WCF when sending dates via WCF REST using the built-in JSON serialization. (at least on .NET 3.5, SP1)

I found the answer here helpful, but a slight edit to the regex is required, as it appears that the timezone GMT offset is being appended onto the number returned (since 1970) in WCF JSON.

In a WCF service I have:

[OperationContract]
[WebInvoke(
    RequestFormat = WebMessageFormat.Json,
    ResponseFormat = WebMessageFormat.Json,
    BodyStyle = WebMessageBodyStyle.WrappedRequest
    )]
ApptVisitLinkInfo GetCurrentLinkInfo( int appointmentsId );
ApptVisitLinkInfo is defined simply:

public class ApptVisitLinkInfo {
    string Field1 { get; set; }
    DateTime Field2 { get; set; }
    ...
}
When "Field2" is returned as Json from the service the value is:

/Date(1224043200000-0600)/
Notice the timezone offset included as part of the value.

The modified regex:

/\/Date\((.*?)\)\//gi
It's slightly more eager and grabs everything between the parens, not just the first number. The resulting time sinze 1970, plus timezone offset can all be fed into the eval to get a date object.

The resulting line of JavaScript for the replace is:

replace(/\/Date\((.*?)\)\//gi, "new Date($1)");
share|improve this answer
answered Dec 30 '09 at 1:21

community wiki
Aaron
Aaron, thanks for sharing. This worked like a charm. – Trent Apr 11 '10 at 20:04
1	  
It is what i search!!! Thank you – Kate Sep 29 '10 at 13:54
thank you, been struggling with the WCF portion.. this worked – chrishawn Dec 17 '10 at 23:13
7	  
this is wrong, new Date(1224043200000-0600) will only subtract 600 from the date, in this case 600 miliseconds, not 6 hours as it should. – ariel Apr 26 '11 at 6:47
@ariel: Have a look at Javascript Date from milliseconds and timezone – Bergi Nov 28 '12 at 22:20
up vote
25
down vote
For those using Newtonsoft Json.NET, read up on how to do it via Native JSON in IE8, Firefox 3.5 plus Json.NET.

Also the documentation on changing the format of dates written by Json.NET is useful: Serializing Dates with Json.NET

For those that are too lazy, here are the quick steps. As JSON has a loose DateTime implementation, you need to use the IsoDateTimeConverter(). Note that since Json.NET 4.5 the default date format is ISO so the code below isn't needed.

string jsonText = JsonConvert.SerializeObject(p, new IsoDateTimeConverter());
The JSON will come through as

"fieldName": "2009-04-12T20:44:55"
Finally, some JavaScript to convert the ISO date to a JavaScript date:

function isoDateReviver(value) {
  if (typeof value === 'string') {
    var a = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)(?:([\+-])(\d{2})\:(\d{2}))?Z?$/.exec(value);
      if (a) {
        var utcMilliseconds = Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4], +a[5], +a[6]);
        return new Date(utcMilliseconds);
      }
  }
  return value;
}
I used it like this

$("<span />").text(isoDateReviver(item.fieldName).toLocaleString()).appendTo("#" + divName);
share|improve this answer
edited Aug 1 '12 at 23:23

community wiki
3 revs, 3 users 77%
Jason Jong
up vote
19
down vote
Don't repeat yourself - automate date conversion using $.parseJSON()

Answers to your post provide manual date conversion to Javascript dates. I've extended jQuery's $.parseJSON() just a little bit so it's able to automatically parse dates when you instruct it to. It processes Asp.net formatted dates (/Date(12348721342)/) as well as ISO formatted dates (2010-01-01T12.34.56.789Z) that are supported by native JSON functions in browsers (and libraries like json2.js).

Anyway. If you don't want to repeat your date conversion code over and over again I suggest you read this blog post and get the code that will make your life a little easier.

share|improve this answer
edited Sep 19 '11 at 6:30

community wiki
2 revs
Robert Koritnik
up vote
16
down vote
If you say in JavaScript,

var thedate = Date(1224043200000);
alert(thedate);
you will see that it's the correct date, and you can use that anywhere in JavaScript code with any framework.

share|improve this answer
edited May 5 '11 at 16:10

community wiki
2 revs, 2 users 77%
John Boker
1	  
That's what I would have thought too except it ends up being: var thedate = /Date(1224043200000)/; at least for me... – rball Dec 3 '09 at 3:38
1	  
very nice trick ! – Steven Spielberg Sep 21 '10 at 11:31
1	  
Date() and Date(1224043200000) both give the same result in both Chrome and Firefox. Not sure if this worked in old browsers, but this answer doesn't work in browsers now. – James Sep 12 '11 at 19:21
@James, Yes it is giving browser current date. :( – vissu Mar 7 '12 at 8:24
2	  
You need to write it as "new Date(1224043200000)". – BrainSlugs83 Jul 13 '12 at 4:38
up vote
12
down vote
If you're using jQuery 1.4's Ajax function with ASP.NET MVC, you can turn all DateTime properties into Date objects with:

// Once
jQuery.parseJSON = function(d) {return eval('(' + d + ')');};

$.ajax({
    ...
    dataFilter: function(d) {
        return d.replace(/"\\\/(Date\(-?\d+\))\\\/"/g, 'new $1');
    },
    ...
});
In jQuery 1.5 you can avoid overriding the parseJSON method globally by using the converters option in the Ajax call.

http://api.jquery.com/jQuery.ajax/

Unfortunately you have to switch to the older eval route in order to get Dates to parse globally in-place - otherwise you need to convert them on a more case-by-case basis post-parse.

share|improve this answer
edited May 5 '11 at 16:19

community wiki
3 revs, 2 users 85%
Chris Moschini
THANK YOU! The converters route in jQuery 1.5 was key. I will post a new answer with the details. – Domenic Apr 8 '11 at 1:48
up vote
10
down vote
There is no built in date type in JSON. This looks like the number of seconds / milliseconds from some epoch. If you know the epoch you can create the date by adding on the right amount of time.

share|improve this answer
answered Oct 15 '08 at 20:46

community wiki
johnstok
That's incorrect, JSON uses Javascript dates, with added timezone information-- the epoch is the same as the javascript Date class's epoch (for obvious reasons). – BrainSlugs83 Jul 13 '12 at 4:48
@BrainSlug83 - this answer provides a reference for the assertion that JSON doesn't have a built-in date type. If you disagree, please provide an alternative reference. (You're not thinking of a specific framework that has decided on a string format to represent dates are you? That's not part of the JSON standard, indeed it couldn't be because it would make it impossible to include a string that is not supposed to be taken as a date but that happens to have a set of characters that match the date pattern.) – nnnnnn Apr 11 at 11:07
up vote
10
down vote
I ended up adding the " characters into Panos's regex to get rid of the ones generated by microsoft serializer for when writing objects into inline script:

So if you have a property in your C# code behind that's something like

protected string JsonObject { get { return jsSerialiser.Serialize(_myObject); }}
and in your aspx you have

<script type="text/javascript">
 var myObject = '<%= JsonObject %>';
</script>
you'd get something like

var myObject = '{"StartDate":"\/Date(1255131630400)\/"}';
Notice the double quotes.

To get this into a form that eval will correctly deserialize I used:

myObject = myObject.replace(/"\/Date\((\d+)\)\/"/g, 'new Date($1)');
I use Prototype and to use it I added

String.prototype.evalJSONWithDates = function() {
 var jsonWithDates = this.replace(/"\/Date\((\d+)\)\/"/g, 'new Date($1)');
 return jsonWithDates.evalJSON(true);
}
share|improve this answer
answered Oct 9 '09 at 1:03

community wiki
Chris Woodward
up vote
9
down vote
Don't over-think this. Like we've done for decades, pass a numeric offset from the de-facto standard epoch of 1 Jan 70 Midnight GMT/UTC/&c in # of seconds (or milliseconds) since this epoch. JavaScript likes it, Java likes it, C likes it, the Internet likes it.

share|improve this answer
edited Oct 30 '09 at 17:28

community wiki
2 revs
Xepoch
8	  
And humans hate it. What date is this: 1224043200000? Completely unreadable. Only a machine knows. – mattmc3 Jun 6 '11 at 15:26
8	  
But its a machine talking to a machine. – Sprintstar Sep 22 '11 at 10:09
Too bad machines don't debug for you @Sprintstar – Justin May 9 at 16:50
up vote
9
down vote
In jQuery 1.5, as long as you have json2.js to cover for older browsers, you can deserialize all dates coming from Ajax as follows:

(function () {
    var DATE_START = "/Date(";
    var DATE_START_LENGTH = DATE_START.length;

    function isDateString(x) {
        return typeof x === "string" && x.startsWith(DATE_START);
    }

    function deserializeDateString(dateString) {
        var dateOffsetByLocalTime = new Date(parseInt(dateString.substr(DATE_START_LENGTH)));
        var utcDate = new Date(dateOffsetByLocalTime.getTime() - dateOffsetByLocalTime.getTimezoneOffset() * 60 * 1000);
        return utcDate;
    }

    function convertJSONDates(key, value) {
      if (isDateString(value)) {
        return deserializeDateString(value);
      }
      return value;
    }

    window.jQuery.ajaxSetup({
      converters: {
        "text json": function(data) {
          return window.JSON.parse(data, convertJSONDates);
        }
      }
    });
}());
I included logic that assumes you send all dates from the server as UTC (which you should); the consumer then gets a JavaScript Date object that has the proper ticks value to reflect this. That is, calling getUTCHours() etc. on the date will return the same value as it did on the server, and calling getHours() will return the value in the user's local timezone as determined by their browser.

This does not take into account WCF format with timezone offsets, though that would be relatively easy to add.

share|improve this answer
edited Apr 8 '11 at 22:38

community wiki
3 revs
Domenic
Just as a note: for the code to work you have to create the startsWith method of the string type – Hugo Zapata Sep 17 '11 at 0:05
up vote
6
down vote
Every one of these answers has one thing in common: they all store dates as a single value ( usually a string ).

Another option is to take advantage of the inherent structure of JSON, and represent a date as list of numbers:

{ "name":"Nick",
  "birthdate":[1968,6,9] }
Of course, you would have to make sure both ends of the conversation agree on the format (year,month,day), and which fields are meant to be dates,... but it has the advantage of completely avoiding the issue of date-to-string conversion. It's all numbers -- no strings at all. Also, using the order: year,month,day also allows proper sorting by date.

Just thinking outside the box here -- a JSON date doesn't have to be stored as a string.

Another bonus to doing it this way is that you can easily ( and efficiently ) select all records for a given year or month by leveraging the way CouchDB handles queries on array values.

share|improve this answer
edited Dec 27 '12 at 16:24

community wiki
2 revs
Nick Perkins
up vote
5
down vote
Posting in awesome thread:

var d = new Date(parseInt('/Date(1224043200000)/'.slice(6, -2)));
alert('' + (1 + d.getMonth()) + '/' + d.getDate() + '/' + d.getFullYear().toString().slice(-2));
share|improve this answer
answered Sep 26 '10 at 11:20

community wiki
Dan Beam
Nice idea, but what if a timezone offset is included? Better to use substr(6) in that case instead of slice(6,-2) -- see my answer below. – Roy Tinker Oct 22 '10 at 19:21
up vote
5
down vote
var newDate = dateFormat(jsonDate, "mm/dd/yyyy"); 
are there any other option without using JQuery Libraries...?

share|improve this answer
edited Aug 22 '11 at 21:50

community wiki
3 revs, 3 users 77%
blgnklc
up vote
4
down vote
Just to add another approach here, the "ticks approach" that WCF takes is prone to problems with timezones if you're not extremely careful such as described here and in other places. So I'm now using the ISO 8601 format that both .NET & JavaScript duly support that includes timezone offsets. Below are the details:

In WCF/.NET:

Where CreationDate is a System.DateTime; ToString("o") is using .NET's Round-trip format specifier that generates an ISO 8601-compliant date string

new MyInfo {
            CreationDate = r.CreationDate.ToString("o"),
        };
In JavaScript

Just after retrieving the Json I go fixup the dates to be JavaSript Date objects using the Date constructor which accepts an ISO 8601 date string...

$.getJSON(
    "MyRestService.svc/myinfo",
    function (data) {
        $.each(data.myinfos, function (r) {
            this.CreatedOn = new Date(this.CreationDate);
        });
        // now each myinfo object in the myinfos collection has a CreatedOn field that is a real JavaScript date (with timezone intact).
       alert(data.myinfos[0].CreationDate.toLocaleString());
    }
)
Once you have a JavaScript date you can use all the convenient and reliable Date methods like toDateString, toLocaleString, etc.

share|improve this answer
edited Jan 30 at 7:12

community wiki
2 revs
scott
up vote
3
down vote
Check up the Date ISO standard; kind of like this; "yyyy.MM.ddThh:mm"

becomes; 2008.11.20T22:18

share|improve this answer
answered Nov 20 '08 at 9:18

community wiki
Thomas Hansen
up vote
3
down vote
A late post, but for those who searched this post.

Imagine this:

    [Authorize(Roles = "Administrator")]
    [Authorize(Roles = "Director")]
    [Authorize(Roles = "Human Resources")]
    [HttpGet]
    public ActionResult GetUserData(string UserIdGuidKey)
    {
        if (UserIdGuidKey!= null)
        {
            var guidUserId = new Guid(UserIdGuidKey);
            var memuser = Membership.GetUser(guidUserId);
            var profileuser = Profile.GetUserProfile(memuser.UserName);
            var list = new {
                              UserName = memuser.UserName,
                              Email = memuser.Email ,
                              IsApproved = memuser.IsApproved.ToString() ,
                              IsLockedOut = memuser.IsLockedOut.ToString() ,
                              LastLockoutDate = memuser.LastLockoutDate.ToString() ,
                              CreationDate = memuser.CreationDate.ToString() ,
                              LastLoginDate = memuser.LastLoginDate.ToString() ,
                              LastActivityDate = memuser.LastActivityDate.ToString() ,
                              LastPasswordChangedDate = memuser.LastPasswordChangedDate.ToString() ,
                              IsOnline = memuser.IsOnline.ToString() ,
                              FirstName = profileuser.FirstName ,
                              LastName = profileuser.LastName ,
                              NickName = profileuser.NickName ,
                              BirthDate = profileuser.BirthDate.ToString() ,
            };
            return Json(list, JsonRequestBehavior.AllowGet);
        }
        return Redirect("Index");
    }
As you can see, I'm utilizing C# 3.0's feature for creating the "Auto" Generics. It's a bit lazy, but I like it and it works. Just a note: Profile is a custom class I've created for my web application project.

share|improve this answer
answered Oct 23 '09 at 6:39

community wiki
Ray Linder
so everytime you add a new role [Authorize(Roles = "Human Resources")] , you have to compile and deploy? wow.... :) – AlexanderN Jun 2 '10 at 14:16
If this is a JSON service then the redirect seems wrong. I'd return a 404 Not Found if the input key is so invalid it can't possibly be found, (and also 404 if it genuinely is not found). When my users are not logged in I return 403 Forbidden. – Richard Corfield Dec 21 '11 at 21:42
It's a "reusable" method. For example, if I wanted to get user data from another View, I can get it as long as I supply the Id. However, if the Id isn't supplied, page redirects to a list of users (Index) to select a user. Simple solution needed for the app, just the way my brain cooked it up at that time. – Ray Linder Dec 25 '11 at 9:26
up vote
3
down vote
Mootools solution:

new Date(Date(result.AppendDts)).format('%x')
Requires mootools-more. Tested using mootools-1.2.3.1-more on Firefox 3.6.3 and IE 7.0.5730.13

share|improve this answer
edited Sep 21 '10 at 12:18

community wiki
2 revs, 2 users 89%
Midhat
up vote
3
down vote
I get the date like this:

"/Date(1276290000000+0300)/"
In some examples the date is in slightly different formats:

"/Date(12762900000000300)/"
"Date(1276290000000-0300)"
etc.

So I came up with the following RegExp:

/\/+Date\(([\d+]+)\)\/+/
and the final code is:

var myDate = new Date(parseInt(jsonWcfDate.replace(/\/+Date\(([\d+-]+)\)\/+/, '$1')));
Hope it helps.

Update: I found this link from Microsoft: How do I Serialize Dates with JSON?

This seems like the one we are all looking for.

share|improve this answer
edited Oct 3 '10 at 7:34

community wiki
2 revs
Michael Vashchinsky
1	  
Regexp replacements are slow... It's much faster to grab the integer portion using substr(6) and pass it to parseInt() -- see my answer below. – Roy Tinker Oct 22 '10 at 19:25
Also have a look at Javascript Date from milliseconds and timezone – Bergi Nov 28 '12 at 22:23
up vote
3
down vote
var obj = eval('(' + "{Date: \/Date(1278903921551)\/}".replace(/\/Date\((\d+)\)\//gi, "new Date($1)") + ')');
var dateValue = obj["Date"];
share|improve this answer
edited Jul 1 '11 at 9:08

community wiki
2 revs, 2 users 50%
在路上
up vote
3
down vote
$.datepicker.formatDate('MM d,yy',new Date(parseInt(place the date that you get from the database here)));

output : August 30,2011 this doesnt give you the current time and date.. it displays whatever is there in your database.

share|improve this answer
answered Aug 30 '11 at 9:33

community wiki
dominic
up vote
3
down vote
Click here to check the Demo

Javascript/JQuery

var = MyDate_String_Value = "/Date(1224043200000)/"
var value = new Date
            (
                 parseInt(MyDate_String_Value.replace(/(^.*\()|([+-].*$)/g, ''))
            );
var dat = value.getMonth() + 
                         1 + 
                       "/" + 
           value.getDate() + 
                       "/" + 
       value.getFullYear();
Result - "10/15/2008"

share|improve this answer
edited May 3 at 22:10

community wiki
5 revs
ewvfwrwwvw
up vote
2
down vote
FYI, for anyone using Python on the server side: datetime.datetime().ctime() returns a string that is natively parsable by "new Date()". That is, if you create a new datetime.datetime instance (such as with datetime.datetime.now), the string can be included in the JSON string, and then that string can be passed as the first argument to the Date constructor. I haven't yet found any exceptions, but I haven't tested it too rigorously, either.

share|improve this answer
answered Jul 8 '10 at 1:19

community wiki
Kyle Alan Hale
up vote
2
down vote
Pretty simple solution for parsing JSON date, use the below functions as per you requirement. You just need to pass the JSON format Date fetched as a parameter to the functions below:

function JSONDate(dateStr) {
    var m, day;
    jsonDate = dateStr;
    var d = new Date(parseInt(jsonDate.substr(6)));
    m = d.getMonth() + 1;
    if (m < 10)
        m = '0' + m
    if (d.getDate() < 10)
        day = '0' + d.getDate()
    else
        day = d.getDate();
    return (m + '/' + day + '/' + d.getFullYear())
}
function JSONDateWithTime(dateStr) {
    jsonDate = dateStr;
    var d = new Date(parseInt(jsonDate.substr(6)));
    var m, day;
    m = d.getMonth() + 1;
    if (m < 10)
        m = '0' + m
    if (d.getDate() < 10)
        day = '0' + d.getDate()
    else
        day = d.getDate();
    var formattedDate = m + "/" + day + "/" + d.getFullYear();
    var hours = (d.getHours() < 10) ? "0" + d.getHours() : d.getHours();
    var minutes = (d.getMinutes() < 10) ? "0" + d.getMinutes() : d.getMinutes();
    var formattedTime = hours + ":" + minutes + ":" + d.getSeconds();
    formattedDate = formattedDate + " " + formattedTime;
    return formattedDate;
}
share|improve this answer
edited Aug 24 '12 at 18:14

community wiki
2 revs, 2 users 67%
Umar Malik
up vote
2
down vote
add jquery ui plugin in your page.

function DateFormate(dateConvert) {
    return $.datepicker.formatDate("dd/MM/yyyy", eval('new ' + dateConvert.slice(1, -1)));
};
share|improve this answer
edited Nov 5 '12 at 7:56

community wiki
2 revs
ThulasiRam
up vote
2
down vote
This is frustrating. My solution was to parse out the "/ and /" from the value generated by asp.net's JavaScriptSerializer so that, though JSON may not have a date literal, it still gets interpreted by the browser as a date, which is what all I really want:{"myDate":Date(123456789)}

Custom JavaScriptConverter for DateTime?

Edit: After seeing a couple upvotes come in on this old answer, I must emphasize the accuracy of Roy Tinker's comment. This is not legal JSON. It's a dirty, dirty hack on the server to remove the issue before it becomes a problem for JavaScript. It will choke a JSON parser. I used it for getting off the ground, but I do not use this any more. However, I still feel the best answer lies with changing how the server formats the date, for example, ISO as mentioned elsewhere.

share|improve this answer
edited May 9 at 21:17

community wiki
2 revs
StarTrekRedneck
That's not legal JSON. It will only work when eval'ing with a Javascript interpreter. But if you're using a JSON decoder, it will choke. – Roy Tinker Oct 22 '10 at 19:18
1	  
Agreed. And if I were just dealing with this one piece of data, I wouldn't consider it. But if I'm dealing with an object of several dates and other properties, it's easier to eval() the whole thing than pick out the properties one at a time. In the end, the root issue is the lack of a (legal) JSON date. Until that exists, we are left to our creative hacks. – StarTrekRedneck Oct 25 '10 at 18:27
up vote
1
down vote
easy to convert json date to date

var s = Response.StartDate;
s = s.replace('/Date(', '');

s = s.replace(')/', '');

var expDate = new Date(parseInt(s));

share|improve this answer
answered Dec 10 '12 at 9:39

community wiki
user1814380
up vote
0
down vote
You also can use the javascript library moment.js, which comes in handy when you plan do deal with different localized formats and perform other operations with dates values

function getMismatch(id) {
$.getJSON("Main.aspx?Callback=GetMismatch", 
{ MismatchId: id },

function (result) {
  $("#AuthMerchId").text(result.AuthorizationMerchantId);
  $("#SttlMerchId").text(result.SettlementMerchantId);
  $("#CreateDate").text(moment(result.AppendDts).format("L"));
  $("#ExpireDate").text(moment(result.ExpiresDts).format("L"));
  $("#LastUpdate").text(moment(result.LastUpdateDts).format("L"));
  $("#LastUpdatedBy").text(result.LastUpdateNt);
  $("#ProcessIn").text(result.ProcessIn);
}
);
return false;
}
Setting up localization is as easy as adding configuration files (you get them at momentjs.com) to your project and configuring the language:

moment.lang('de');
share|improve this answer
answered May 15 at 6:21

community wiki
martinoss
up vote
0
down vote
I also had to search for a solution to this problem and eventually I came across moment.js which is a nice library that can parse this date format and many more.

var d = moment(yourdatestring)
It saved some headache for me so I thought I'd share it with you. :)
You can find some more info about it here: http://momentjs.com/

share|improve this answer
answered May 15 at 6:36

community wiki
Venemo
up vote
-3
down vote
Your JSON should probably be returning an object of some sort (well, a string representation thereof).

"{ myDate : Date(1224043200000) }"
Using jQuery, you can access your data object this way:

$.get(
    "myJSONFile.php",
    function (data) {
        // data.myDate will be a date object.

        // to show in a short date format (eg: dd/mm/yyyy)
        alert (
            data.myDate.getDate() + "/"
            + (data.myDate.getMonth() + 1) + "/"
            + data.myDate.getFullYear()
        ); // alerts: "15/10/2008"
    }
);
share|improve this answer
answered Oct 16 '08 at 3:47

community wiki
nickf
.NET returns it a different way. – rball Dec 3 '09 at 3:56
how does it return it? – nickf Dec 3 '09 at 3:58
/Date(1224043200000)/ not Date(1224043200000) – rball Dec 5 '09 at 20:30
1	  
that's strange. wouldn't that make it a regex? – nickf Dec 6 '09 at 3:59
No, it's inside quote marks. – ErikE Oct 18 '10 at 5:11
show 2 more comments
protected by jgauffin Sep 19 '11 at 11:28
This question is protected to prevent "thanks!", "me too!", or spam answers by new users. To answer it, you must have earned at least 10 reputation on this site.

Not the answer you're looking for? Browse other questions tagged jquery asp.net asp.net-mvc ajax json or ask your own question.
tagged
jquery × 325172
asp.net × 174323
ajax × 64207
asp.net-mvc × 61364
json × 48130
asked
4 years ago
viewed
214440 times
active
22 days ago

Lead API Backend Developer
Ultra Mobile
Williamsburg, NY
Platform Operations Manager
LogicBlox
Atlanta, GA
Software Engineer/Game Developer
Virtually Better
Decatur, GA
More jobs near Tucker...
Linked
99 Converting .NET DateTime to JSON
25 How to pass a JSON date value via ASP.NET MVC using JSON.Net?
8 How to parse JSON to receive a Date object in JavaScript?
14 Custom JavaScriptConverter for DateTime?
6 Converting json results to a date
0 JSON date format mm/dd/yyyy
5 Posting DateTime to a ApiController in ASP MVC 4 (Beta)
4 Javascript DATE and C# date - what is the best solution?
6 Get JSON data with jQuery from a .NET service: confused with ajax setup
1 How do I convert a json date format to the following dd/mm/yyyy
see more linked questions…
Related
3029 What is the *correct* JSON content type?
3 ASP.Net MVC Json Result: Parameters passed to controller method issue
0 JSON Date coming through as Today's date?
2 Internet Explorer $.ajax / MVC JSON call failing
0 how to convert Json date format into datetime format(mm/dd/yyyy))?
1 How would I return dates via JSON in the specified format?
0 Formatting a JSON Date with javascript
1 How to scroll a “JSON from Viewmodel” array to change the date format for KnockoutJS?
3 Format json date
0 json date format with a specific syntax
question feed
